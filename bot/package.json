import express from 'express';
import dotenv from 'dotenv';

dotenv.config();
const app = express();
app.use(express.json());

const TOKEN   = process.env.TELEGRAM_BOT_TOKEN || '';
const SELLER  = process.env.SELLER_TON_ADDRESS || '';
const FRONTEND_URL = (process.env.FRONTEND_URL || 'https://tonfront.onrender.com').replace(/\/+$/,'');
const COMMUNITY = process.env.TELEGRAM_COMMUNITY_LINK || '';
const BOT_LINK  = process.env.TELEGRAM_BOT_LINK || '';
const OPENAI_API_KEY = process.env.OPENAI_API_KEY || '';

if (!TOKEN) console.warn('[bot] TELEGRAM_BOT_TOKEN missing');
if (!OPENAI_API_KEY) console.warn('[bot] OPENAI_API_KEY missing (AI replies disabled)');

const API = `https://api.telegram.org/bot${TOKEN}`;

async function tg(method, payload) {
  const r = await fetch(`${API}/${method}`, {
    method: 'POST',
    headers: {'Content-Type':'application/json'},
    body: JSON.stringify(payload)
  });
  return r.json().catch(()=> ({}));
}

function donationText(amt) {
  const nano = Math.round((Number(amt) || 1) * 1e9);
  const tonDeep = SELLER ? `ton://transfer/${SELLER}?amount=${nano}&text=${encodeURIComponent('Thanks for your work!')}` : null;
  const siteUrl = `${FRONTEND_URL}?donate=${encodeURIComponent(Number(amt)||1)}`;
  let lines = [
    `סכום מוצע: ${amt} TON`,
    `אתר: ${siteUrl}`,
    `Telegram Wallet: https://t.me/wallet`
  ];
  if (tonDeep) lines.unshift(`ארנק TON (deeplink): ${tonDeep}`);
  return lines.join('\n');
}

async function aiAnswer(userText) {
  if (!OPENAI_API_KEY) return null;

  // OpenAI Chat Completions (Node SDK)
  // דוגמה לפי הדוקס הרשמיים
  const { default: OpenAI } = await import('openai');
  const client = new OpenAI({ apiKey: OPENAI_API_KEY });

  const system = [
    'אתה עוזר חכם עבור קהילת TON.',
    'הנחיה: לכוון משתמשים לשלם/לתרום דרך האתר או הארנק—לא לבקש פרטים אישיים.',
    `קישור אתר: ${FRONTEND_URL}.`,
    COMMUNITY ? `קהילה: ${COMMUNITY}.` : '',
    BOT_LINK ? `בוט: ${BOT_LINK}.` : ''
  ].filter(Boolean).join(' ');

  // אפשר Responses API או Chat Completions; כאן בחרתי Chat Completions
  const resp = await client.chat.completions.create({
    model: 'gpt-4o-mini',
    messages: [
      { role: 'system', content: system },
      { role: 'user',   content: userText }
    ],
    temperature: 0.3,
    max_tokens: 350
  });
  const content = resp.choices?.[0]?.message?.content?.trim();
  return content || null;
}

app.get('/health', (_req, res) => {
  res.json({ ok: true, service: 'bot', time: new Date().toISOString() });
});

app.post('/webhook', async (req, res) => {
  try {
    const update = req.body;
    // מייד עונים 200 לטלגרם כדי לא לחסום
    res.json({ ok: true });

    const msg = update.message || update.edited_message;
    if (!msg) return;

    const chat_id = msg.chat.id;
    const text = (msg.text || '').trim();

    // /start עם payload
    if (text.startsWith('/start')) {
      const payload = text.split(' ')[1] || '';
      if (payload.startsWith('donate_')) {
        const amt = payload.split('_')[1] || '1';
        await tg('sendMessage', {
          chat_id,
          text: `תרומה/תשלום ב-TON\n\n${donationText(amt)}`,
          disable_web_page_preview: true
        });
        return;
      }
      // ברירת מחדל start
      await tg('sendMessage', {
        chat_id,
        text: `ברוך הבא! אפשר לתרום/לשלם כאן: ${FRONTEND_URL}\nקהילה: ${COMMUNITY || '—'}`
      });
      return;
    }

    // הודעות חופשיות → AI (אם יש מפתח)
    if (text) {
      const answer = await aiAnswer(text).catch(e => {
        console.error('[openai]', e?.status || e?.message || e);
        return null;
      });
      if (answer) {
        await tg('sendMessage', {
          chat_id,
          text: answer
        });
      } else {
        await tg('sendMessage', {
          chat_id,
          text: `לתרומה/תשלום: ${FRONTEND_URL}\nבמידה ורוצים עזרה, שאל/י שוב.`
        });
      }
    }
  } catch (e) {
    console.error('[webhook handler]', e);
    // לא מחזירים כאן תשובה כי כבר ענינו למעלה
  }
});

const PORT = Number(process.env.PORT || 8080);
app.listen(PORT, () => {
  console.log(`[bot] listening on http://0.0.0.0:${PORT}`);
  console.log(`[bot] FRONTEND_URL=${FRONTEND_URL}`);
});
